# KorpBot/commands.py (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–û–í–ï–†–ö–û–ô –ü–†–ê–í)

import logging
from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from keyboards import create_delete_confirm_keyboard

from database.main import async_session
from database.models import Poll, PollOption, User
from poll_state import start_new_poll, record_vote
from keyboards import (
    get_main_menu,
    create_poll_choice_keyboard,
    create_admin_poll_keyboard,
    create_voting_keyboard,
    create_results_keyboard
)
from config import is_admin  # <-- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ü–†–û–í–ï–†–ö–ò

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
router = Router()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def get_poll_text_and_options(poll_id: int, session: AsyncSession) -> tuple[str, list[PollOption] | None]:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
    query = select(Poll).options(selectinload(Poll.options)).filter(Poll.id == poll_id)
    poll = (await session.execute(query)).scalar_one_or_none()
    if not poll: return "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", None
    total_votes = sum(opt.votes_count for opt in poll.options)
    text_lines = [f"<b>{poll.title}</b>\n", f"üë• –í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {total_votes}\n"]
    sorted_options = sorted(poll.options, key=lambda o: o.id)
    for option in sorted_options:
        percentage = (option.votes_count / total_votes * 100) if total_votes > 0 else 0
        text_lines.append(f"‚ñ´Ô∏è {option.option_text}: {option.votes_count} ({percentage:.1f}%)")
    return "\n".join(text_lines), sorted_options


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class PollCreation(StatesGroup):
    waiting_for_question = State()
    waiting_for_options = State()


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(Command("start"))
async def start(message: types.Message):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! üëã\n\n"
        "–Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.",
        reply_markup=get_main_menu()
    )


@router.message(Command("webreports"))
async def get_web_interface_link(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ 'http://localhost:8000' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω, –µ—Å–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    web_url = "http://localhost:8000/api/"

    await message.answer(
        f"üîó –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{web_url}"
    )

@router.message(Command("help"))
async def help_command(message: types.Message):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await message.answer(
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/poll - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.\n"
        "/site - –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ë–µ–ª–ê–ó.\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n\n"
        "<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "/webreports - –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –æ–ø—Ä–æ—Å—ã.\n"
        "/newpoll - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.\n"
        "/list_polls - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏.",
        parse_mode="HTML"
    )


@router.message(Command("site", "website"))
async def site(message: types.Message):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://belaz.by")


@router.message(Command("poll"))
async def list_active_polls(message: types.Message):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async with async_session() as session:
        result = await session.execute(select(Poll).filter_by(status=True).order_by(Poll.created_at.desc()))
        active_polls = result.scalars().all()
    if not active_polls:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç. üò¥")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è:", reply_markup=create_poll_choice_keyboard(active_polls))


# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (FSM) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ ---
@router.message(Command("newpoll"))
async def newpoll_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:")
    await state.set_state(PollCreation.waiting_for_question)


@router.message(StateFilter(PollCreation.waiting_for_question))
async def newpoll_get_question(message: types.Message, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await state.update_data(question=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    await state.set_state(PollCreation.waiting_for_options)


@router.message(StateFilter(PollCreation.waiting_for_options))
async def newpoll_get_options(message: types.Message, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    options = [opt.strip() for opt in message.text.split(",") if opt.strip()]
    if len(options) < 2:
        await message.answer("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    data = await state.get_data()
    question = data.get("question")
    async with async_session() as session:
        poll_id = await start_new_poll(session, question, options)
    await message.answer(f"‚úÖ –û–ø—Ä–æ—Å \"{question}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID {poll_id}.")
    await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏ "–∂–∏–≤—ã—Ö" –æ–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data.startswith("poll_"))
async def send_custom_poll(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    poll_id = int(callback.data.split("_")[1])
    async with async_session() as session:
        poll_text, options = await get_poll_text_and_options(poll_id, session)
    if not options:
        await callback.answer(poll_text, show_alert=True)
        return
    await callback.message.answer(text=poll_text, reply_markup=create_voting_keyboard(options), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("vote_"))
async def handle_vote(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    option_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    user_full_name = callback.from_user.full_name
    async with async_session() as session:
        option = await session.get(PollOption, option_id)
        if not option:
            await callback.answer("–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
            return
        poll_id = option.poll_id
        await record_vote(session, poll_id, option_id, user_id, user_full_name)
        new_text, _ = await get_poll_text_and_options(poll_id, session)
    try:
        await callback.message.edit_text(text=new_text, reply_markup=create_results_keyboard(poll_id),
                                         parse_mode="HTML")
        await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")


@router.callback_query(F.data.startswith("results_"))
async def refresh_results(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    poll_id = int(callback.data.split("_")[1])
    async with async_session() as session:
        new_text, options = await get_poll_text_and_options(poll_id, session)
    if not options:
        await callback.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    try:
        async with async_session() as session:
            user_vote_check = await session.execute(
                select(User).filter_by(poll_id=poll_id, user_tg_id=callback.from_user.id))
            voted = user_vote_check.scalar_one_or_none() is not None
        keyboard = create_results_keyboard(poll_id) if voted else create_voting_keyboard(options)
        await callback.message.edit_text(text=new_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")


# --- –ö–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ ---
@router.message(Command("list_polls"))
async def list_all_polls_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    async with async_session() as session:
        result = await session.execute(select(Poll).order_by(Poll.created_at.desc()))
        all_polls = result.scalars().all()

    if not all_polls:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        return

    await message.answer("<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>", parse_mode="HTML")
    for poll in all_polls:
        status_emoji = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if poll.status else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"
        poll_text = f"<b>ID: {poll.id}</b> - {poll.title}\n<i>–°—Ç–∞—Ç—É—Å: {status_emoji}</i>"
        await message.answer(poll_text, reply_markup=create_admin_poll_keyboard(poll), parse_mode="HTML")


@router.callback_query(F.data.startswith("admin_poll_"))
async def manage_poll_status(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)

    parts = callback.data.split("_")
    action = parts[2]
    poll_id = int(parts[3])

    async with async_session() as session:
        poll_to_update = await session.get(Poll, poll_id)
        if not poll_to_update:
            return await callback.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

        poll_to_update.status = (action == "activate")
        await session.commit()
        await callback.answer(f"–û–ø—Ä–æ—Å {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if poll_to_update.status else '–∑–∞–≤–µ—Ä—à–µ–Ω'}.")

        status_emoji = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if poll_to_update.status else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"
        poll_text = f"<b>ID: {poll_to_update.id}</b> - {poll_to_update.title}\n<i>–°—Ç–∞—Ç—É—Å: {status_emoji}</i>"
        await callback.message.edit_text(poll_text, reply_markup=create_admin_poll_keyboard(poll_to_update),
                                         parse_mode="HTML")


@router.callback_query(F.data.startswith("admin_report_"))
async def send_web_report_link(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)

    poll_id = int(callback.data.split("_")[2])
    report_url = f"http://localhost:8000/api/report/{poll_id}/view"
    await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ä–æ—Å—É ID {poll_id}:\n{report_url}")
    await callback.answer()

    @router.callback_query(F.data.startswith("admin_delete_ask_"))
    async def ask_delete_poll(callback: types.CallbackQuery):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–ø—Ä–æ—Å–∞."""
        if not is_admin(callback.from_user.id):
            return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)

        poll_id = int(callback.data.split("_")[3])
        await callback.message.edit_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å ID {poll_id}?\n"
            "<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é —Å–≤—è–∑–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!</b>",
            reply_markup=create_delete_confirm_keyboard(poll_id),
            parse_mode="HTML"
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("admin_delete_confirm_"))
    async def confirm_delete_poll(callback: types.CallbackQuery):
        """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if not is_admin(callback.from_user.id):
            return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)

        poll_id = int(callback.data.split("_")[3])
        async with async_session() as session:
            poll_to_delete = await session.get(Poll, poll_id)
            if poll_to_delete:
                await session.delete(poll_to_delete)
                await session.commit()
                await callback.message.edit_text(f"‚úÖ –û–ø—Ä–æ—Å ID {poll_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await callback.message.edit_text(f"‚ö†Ô∏è –û–ø—Ä–æ—Å ID {poll_id} —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ.")

        await callback.answer()

    @router.callback_query(F.data.startswith("admin_delete_cancel_"))
    async def cancel_delete_poll(callback: types.CallbackQuery):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –æ–ø—Ä–æ—Å–∞."""
        if not is_admin(callback.from_user.id):
            return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)

        poll_id = int(callback.data.split("_")[3])
        async with async_session() as session:
            poll = await session.get(Poll, poll_id)
            if not poll:
                await callback.message.edit_text("–û–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                return

            status_emoji = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if poll.status else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"
            poll_text = f"<b>ID: {poll.id}</b> - {poll.title}\n<i>–°—Ç–∞—Ç—É—Å: {status_emoji}</i>"
            await callback.message.edit_text(poll_text, reply_markup=create_admin_poll_keyboard(poll),
                                             parse_mode="HTML")

        await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")